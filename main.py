import re
import nmap

nmap = nmap.PortScanner()
class InvalidIPAddressError(Exception):
    pass
def validate_ip_address(ip):
    ip_pattern = re.compile(
        r'^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.'
        r'(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.'
        r'(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.'
        r'(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'
    )
    if not ip_pattern.match(ip):
        raise InvalidIPAddressError("Błąd! Podany adres IP jest nieprawidłowy.")
def scan_ports(ip_address, ports=None):
    scan_argument = f'-p {ports}' if ports else '-Pn -p-'
    ports_result = nmap.scan(ip_address, arguments=scan_argument)
    return ports_result
def get_detailed_information(ip_address, ports):
    ports_to_scan = ','.join(map(str, ports))
    os_information = nmap.scan(ip_address, arguments=f"-O -A -sV -p {ports_to_scan}")

    for ip, info in os_information['scan'].items():
        print("DETAILED INFORMATIONS ABOUT PORT AND SYSTEM")
        print("-" * 50)
        for port, port_info in info['tcp'].items():
            print(f'Port {port} | {port_info["state"]}:')
            print(f"  Service: {port_info['name']}")
            print(f"  Product: {port_info['product']}")
            print(f"  cpe: {port_info['cpe']}")
            if port_info['version']:
                print(f"  Version: {port_info['version']}")
            if port_info['extrainfo']:
                print(f"  Extra Info: {port_info['extrainfo']}")
            print("-" * 50)

        for osmatch in info.get('osmatch', []):
            print(f"OS Match Name: {osmatch['name']}")
            for osclass in osmatch.get('osclass', []):
                print(f"  Vendor: {osclass['vendor']}")
                print(f"  OS Family: {osclass['osfamily']}")
                print(f"  OS Gen: {osclass['osgen']}")
                print(f"  Accuracy: {osclass['accuracy']}")
                print(f"  CPE: {', '.join(osclass.get('cpe', []))}")
                print("-" * 50)
    return os_information
def get_open_ports(ports_result, ip_address):
    open_ports = []
    for host, info in ports_result['scan'].items():
            print("-" * 50)
            print(f'Host: {host}({info["hostnames"][0]["name"]})')
            print(f'State: {info["status"]["state"]}')
            print("-" * 50)
            for port, port_info in ports_result['scan'][ip_address]['tcp'].items():
                if port_info.get('state') == 'open':
                    print("Port {}, state: {}".format(port, port_info["state"]))
                    if port not in open_ports:
                        open_ports.append(port)
                    print("-" * 50)
            print("\n\n")
    return open_ports

def main():
    try:
        ip_address = input("Podaj adres IP: ")
        validate_ip_address(ip_address)
        ports_result = scan_ports(ip_address)
        open_ports = get_open_ports(ports_result, ip_address)
        get_detailed_information(ip_address, open_ports)

    except InvalidIPAddressError as e:
        print(e)

    nmap.close()

if __name__ == "__main__":
    main()
