import re
import nmap

nmap = nmap.PortScanner()

class InvalidIPAddressError(Exception):
    pass

def validate_ip_address(ip):
    ip_pattern = re.compile(
        r'^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.'
        r'(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.'
        r'(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.'
        r'(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'
    )

    if not ip_pattern.match(ip):
        raise InvalidIPAddressError("Błąd! Podany adres IP jest nieprawidłowy.")

def scan_ports(ip_address, ports=None):
    ports_result = nmap.scan(ip_address, arguments=f"-sV -Pn -p {ports}")
    return ports_result

def get_os_information(ip_address, ports):
    os_information = nmap.scan(ip_address, arguments=f"-O -A -p {ports}")
def get_open_ports(ports_result, ip_address):
    open_ports = []
    if 'tcp' in ports_result['scan'][ip_address]:
        for port, port_info in ports_result['scan']['127.0.0.1']['tcp'].items():
            if port_info.get('state') == 'open':
                open_ports.append(port)
    print(open_ports)

def main():
    try:
        ip_address = input("Podaj adres IP: ")
        validate_ip_address(ip_address)
        ports_result = scan_ports(ip_address, "22,21,80")
        get_open_ports(ports_result, ip_address)

    except InvalidIPAddressError as e:
        print(e)

if __name__ == "__main__":
    main()
