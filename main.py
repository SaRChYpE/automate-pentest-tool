import re
import nmap
import argparse

nmap = nmap.PortScanner()
class InvalidIPAddressError(Exception):
    pass
def validate_ip_address(ip):
    ip_pattern = re.compile(
        r'^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.'
        r'(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.'
        r'(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.'
        r'(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'
    )
    if not ip_pattern.match(ip):
        raise InvalidIPAddressError("Błąd! Podany adres IP jest nieprawidłowy.")
    else:
        return ip

class FullScan():
    def __init__(self, ip_address, ports=None):
        self.ip_address = ip_address
        self.ports = ports

        self.ports_result = None
        self.open_ports = None

    #Function that's scan ip for all or provided ports, then it returns results in a list
    def scan_ports(self):
        scan_argument = f'-p {self.ports}' if self.ports else '-Pn -p-'
        self.ports_result = nmap.scan(self.ip_address, arguments=scan_argument)
        return self.ports_result

    #list from the previous function is provided to get_open_ports, this function are searching for open ports from results
    def get_open_ports(self):
        self.open_ports = []
        for host, info in self.ports_result['scan'].items():
            print("-" * 50)
            print(f'Host: {host}({info["hostnames"][0]["name"]})')
            print(f'State: {info["status"]["state"]}')
            print("-" * 50)
            for port, port_info in self.ports_result['scan'][self.ip_address]['tcp'].items():
                if port_info.get('state') == 'open':
                    print("Port {}, state: {}".format(port, port_info["state"]))
                    if port not in self.open_ports:
                        self.open_ports.append(port)
                    print("-" * 50)
            print("\n\n")
        return self.open_ports

    #after all get_detailed_information gets list of open ports and searching for a detailed informations of it
    def get_detailed_information(self):
        ports_to_scan = ','.join(map(str, self.open_ports))

        os_information = nmap.scan(self.ip_address, arguments=f"-O -A -sV -p {ports_to_scan}")
        ports_data = {}

        for ip, info in os_information['scan'].items():
            print("DETAILED INFORMATIONS ABOUT PORT AND SYSTEM")
            print("-" * 50)
            for port, port_info in info['tcp'].items():
                print(f'Port {port} | {port_info["state"]}:')
                print(f"  Service: {port_info['name']}")
                print(f"  Product: {port_info['product']}")
                print(f"  cpe: {port_info['cpe']}")
                print(f"  Version: {port_info['version']}") if port_info['version'] else None,
                print(f"  Extra Info: {port_info['extrainfo']}") if port_info['extrainfo'] else None
                print("-" * 50)
                port_data = {
                    'service': port_info['name'],
                    'product': port_info['product'],
                    'cpe': port_info['cpe'],
                    'version': port_info['version'] if port_info['version'] else None,
                    'extrainfo': port_info['extrainfo'] if port_info['extrainfo'] else None
                }
                ports_data[port] = port_data

            for osmatch in info.get('osmatch', []):
                print(f"OS Match Name: {osmatch['name']}")
                os_info = {
                    'os_match_name': osmatch['name'],
                    'os_classes': []
                }
                for osclass in osmatch.get('osclass', []):
                    print(f"  Vendor: {osclass['vendor']}")
                    print(f"  OS Family: {osclass['osfamily']}")
                    print(f"  OS Gen: {osclass['osgen']}")
                    print(f"  Accuracy: {osclass['accuracy']}")
                    print(f"  CPE: {', '.join(osclass.get('cpe', []))}")
                    print("-" * 50)
                    os_class_data = {
                        'vendor': osclass['vendor'],
                        'os_family': osclass['osfamily'],
                        'os_gen': osclass['osgen'],
                        'accuracy': osclass['accuracy'],
                        'cpe': osclass.get('cpe', [])
                    }
                    os_info['os_classes'].append(os_class_data)
                    print("-" * 50)
            ports_data[port]['os_info'] = os_info
        return ports_data
class ScanPorts(FullScan):
    def __init__(self):
        self.ip_address = ip_address
        self.ports = ports

def main():
    parser = argparse.ArgumentParser(description="Automate pentest tool")

    parser.add_argument('-i', '--ip', required=True, help="Ip address in format 0.0.0.0", type=validate_ip_address)
    parser.add_argument('-p', '--ports', nargs='+', help="Ports to scan")
    parser.add_argument('-a', '--fullscan', action='store_true', help="Execute full scan on network")
    try:
        args = parser.parse_args()
    except InvalidIPAddressError as e:
        print(e)
        return

    if args.fullscan == True:
        if not args.ports:
            print("No ports provided, scanning all ports!")
            fullscan = FullScan(args.ip)
        else:
            fullscan = FullScan(args.ip, args.ports)
        fullscan.scan_ports()
        fullscan.get_open_ports()
        fullscan.get_detailed_information()

if __name__ == "__main__":
    main()
